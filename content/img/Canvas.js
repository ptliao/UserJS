const EXPORTED_SYMBOLS = ['Canvas'];Components.utils.import('chrome://UserJS/content/require.js');Components.utils.import('chrome://UserJS/content/utils/PATH_MANAGE.js');const IO = Cc["@mozilla.org/network/io-service;1"].getService(Ci.nsIIOService);function Canvas(canvas) {	if (!(this instanceof Canvas)) {		return new Canvas(canvas);	} else {		this.canvas = canvas;	}}Canvas.prototype = {	save: function(url) {		var path = PATH_MANAGE.urlToPath(url).replace(/file:\/+/,'');		var file = Cc["@mozilla.org/file/local;1"].createInstance(Ci.nsILocalFile);		file.initWithPath(path); 				if (file.exists() == false) {			file.create(0,0);		}				var source = IO.newURI(this.canvas.toDataURL("image/png", ""), "UTF8", null);		var persist = Cc["@mozilla.org/embedding/browser/nsWebBrowserPersist;1"].createInstance(Ci.nsIWebBrowserPersist);		persist.persistFlags = Ci.nsIWebBrowserPersist.PERSIST_FLAGS_REPLACE_EXISTING_FILES;		persist.persistFlags |= Ci.nsIWebBrowserPersist.PERSIST_FLAGS_AUTODETECT_APPLY_CONVERSION;		persist.saveURI(source, null, null, null, null, file);	},	toDataURL: function () {		return this.canvas.toDataURL("image/png", "");	}};