const EXPORTED_SYMBOLS = ['OPTS_MANAGE'];Components.utils.import('chrome://UserJS/content/require.js');Components.utils.import('chrome://UserJS/content/utils/UTIL.js');Components.utils.import('chrome://UserJS/content/datebase/DateBase.js');const COOKIE_MANAGE = require('COOKIE_MANAGE');const INFO_MANAGE = require('INFO_MANAGE');var Ajax = require('Ajax');var parser = Cc["@mozilla.org/xmlextras/domparser;1"].createInstance(Ci.nsIDOMParser);var $ = {	strFormat:function (str ,obj,flag){		flag=flag||false;		return str.replace(/\{#.+?\}/g,function(w){ 			var temp=w.replace(/[\{#\}]/g,'');			if(temp in obj) return obj[temp];			if(flag){				return '';			}			return w; 		});	}}const REG = /(.*)\.js/;const SCRIPTS_FOLDER = (function () {	var aFolder = Services.dirsvc.get("UChrm", Ci.nsILocalFile);	aFolder.appendRelativePath('UserScriptLoader\\opts');	try {		if( !aFolder.exists() || !aFolder.isDirectory() ) {			aFolder.create(Ci.nsIFile.DIRECTORY_TYPE, 0664);		}	} catch (e) {		Cu.reportError(e.message);		return ;	}	return aFolder;})();const OPTS_MANAGE = {	fromFL: function () {		var files = SCRIPTS_FOLDER.directoryEntries.QueryInterface(Ci.nsISimpleEnumerator);		while (files.hasMoreElements()) {			let file = files.getNext().QueryInterface(Ci.nsIFile);			let match = file.leafName.match(REG);			if (!!match) {				var appKey = match[1];				OPTS_MANAGE['dealing'] = appKey;				UTIL.loadSubScript('USL://opts/'+file.leafName, OPTS_MANAGE, "gbk");				for (var i in OPTS_MANAGE[appKey]) {					OPTS_MANAGE[appKey][i].appKey = appKey;				}			}		}		this.init = 'Completion';		Services.obs.notifyObservers(null, 'userjs-OPTS_MANAGE', 'Completion');	},	reload: function (appKey) {		if (!!appKey) {			OPTS_MANAGE['dealing'] = appKey;			UTIL.loadSubScript('USL://opts/'+appKey+'.js', OPTS_MANAGE, "gbk");		} else {			this.fromFL();		}	}};if (!OPTS_MANAGE.init) {	OPTS_MANAGE.init = true;	OPTS_MANAGE.fromFL();}	