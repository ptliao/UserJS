const EXPORTED_SYMBOLS = ['COOKIE_MANAGE'];Components.utils.import('chrome://UserJS/content/require.js');Components.utils.import('chrome://UserJS/content/datebase/DateBase.js');Components.utils.import('chrome://UserJS/content/network/COOKIES.js');/*DB: appKey,userId,hostPsth,cksappKey:{	userId:{		'hostPsth':cks	}}appKey,userId,hostPsth,cksuserId ´æ´¢ÔÚ www.wgu.com/appKey/ ÏÂµÄuserId*/function getURIHost (aURL) {	try {		return Services.io.newURI(aURL, null, null).host;	} catch (e) {		return '';	}}function getType(value) {	return Object.prototype.toString.call(value);};function getparamsAry (paramsAry, cache, appKey) {	let userId, hostPsth;	for (userId in cache[appKey]) {		for (hostPsth in cache[appKey][userId]) {			paramsAry.push({				'appKey': appKey, 				'userId': userId, 				'hostPsth': hostPsth,				'cks': cache[appKey][userId][hostPsth]			})		}	}};const COOKIE_MAP = {	'expires': 1,	'path': 1,	'domain': 1,	'version': 1,	'max-age': 1};const COOKIE_HOST = 'www.wgu.com';const COOKIE_SERVICE = Services.cookies;const COOKIE_MANAGE = {		db: new DateBase('USL://datebase/cache.sqlite').open(),	cache: {},	fromDB: function (_appKey) {		let self = this, _sql = 'select * from cookie ' + (!!_appKey ? ' where appKey = ' + _appKey : '');		this.db.exeSQLAsync(_sql, {} ,function (mess, res) {			if (mess == 'OK') {				for (let i = 0, len = res.length; i < len; i++) {					let line = res[i];					self.cache[line.appKey] = self.cache[line.appKey] || {};					self.cache[line.appKey][line.userId] = self.cache[line.appKey][line.userId] || {};					self.cache[line.appKey][line.userId][line.hostPsth] = line.cks;				}			} else if (mess == 'Completion' || mess == 'Error') {				self.init = mess;				Services.obs.notifyObservers(null, 'userjs-COOKIE_MANAGE', mess);			}		})		return this;	},	toDB: function (_appKey) {		let cache = this.cache, paramsAry = [];		if (!!_appKey) {			getparamsAry(paramsAry, cache, _appKey);		} else {			for (var appKey in cache) {				getparamsAry(paramsAry, cache, appKey);			}		}		if (paramsAry.length > 0) {			this.db.exeSQLBatchAsync("REPLACE INTO cookie(appKey, userId, hostPsth, cks) VALUES (:appKey, :userId, :hostPsth, :cks)",paramsAry);		}		return this;	},	toDBAll: function (filter) {		let cache = this.cache, paramsAry = [];		filter = filter || function () {return true};		for (var appKey in cache) {			if (filter(appKey)) {				getparamsAry(paramsAry, cache, appKey);			}		}		if (paramsAry.length > 0) {			this.db.exeSQLBatchAsync("REPLACE INTO cookie(appKey, userId, hostPsth, cks) VALUES (:appKey, :userId, :hostPsth, :cks)",paramsAry);		}		return this;	},	clearDB: function (_appKey) {		if (!!_appKey) {			delete this.cache[_appKey];			this.db.SQL("DELETE FROM cookie where appKey = '"+_appKey+"'");		}	},	clear: function (_appKey, _userId) {		var sql = '';		if (_appKey && !_userId) {			delete this.cache[_appKey];			sql = "DELETE FROM cookie where appKey = '"+_appKey+"'";					} else if (_appKey && _userId) {			if (this.cache[_appKey] && this.cache[_appKey][_userId]) {				delete this.cache[_appKey][_userId];			}			sql = "DELETE FROM cookie where appKey = '"+_appKey+"' and userId= '" + _userId + "'; ";		}		this.db.SQL(sql);	},	setUserIdCK: function (_appKey, _userId) {		COOKIES.add(COOKIE_HOST + '/' + _appKey + '/', 'userId='+encodeURIComponent(_userId));		return this;	},	getUserIdCK: function (_appKey) {		return decodeURIComponent(COOKIES.getOne(COOKIE_HOST + '/' + _appKey + '/','userId'));	},	toFF: function (_appKey, _userId) {		let cache = this.cache;		if (!_userId) {			_userId = this.getUserIdCK(_appKey);		}		if (!!cache[_appKey] && !!cache[_appKey][_userId]) {			for (var hostPsth in cache[_appKey][_userId]) {				COOKIES.add(hostPsth, cache[_appKey][_userId][hostPsth]);			}		}		this.setUserIdCK(_appKey, _userId);		return this;	},	fromFF: function (_appKey, _userId, hostAry) {		this.setUserIdCK(_appKey, _userId);		this.cache[_appKey] = this.cache[_appKey] || {};		this.cache[_appKey][_userId] = {};		for (let i = 0, len = hostAry.length; i < len; i++) {			_extend(this.cache[_appKey][_userId], COOKIES.getHost(hostAry[i]));		}		return this;	},	clearFF: function (hostAry) {		for (let i = 0, len = hostAry.length; i < len; i++) {			COOKIES.removeHost(hostAry[i]);		}		return this;	},	//setCookie to cache	setCookie: function (ck, _appKey, _userId, uri) {		if (getType(ck) == "[object String]") {			let cks = ck.split('\n'), re = [];			for (let i = 0, len = cks.length; i < len; i++) {				let obj = {};				cks[i].replace(/;? ?([^ ]+?)=([^;]+)/g,function (re, name, val){					if (name.toLowerCase() in COOKIE_MAP) {						obj[name.toLowerCase()] = val;					} else {						obj.key = name||'';						obj.value = val||'';					}				});				re.push(obj);			}			this.setCookie(re,_appKey,_userId,uri);		} else if (getType(ck) == "[object Array]") {			for (let i = 0, len = ck.length; i < len; i++){				this.setCookie(ck[i],_appKey,_userId,uri);			}		} else if (getType(ck) == "[object Object]") {			var domain = getURIHost(uri);			this.cache[_appKey] = this.cache[_appKey] ||{};			this.cache[_appKey][_userId] = this.cache[_appKey][_userId] || {};			let cks = this.cache[_appKey][_userId];			//console.log((ck.domain||'none')+ck.key);			if (!!ck.domain) {				if (ck.domain[0] != '.'){					ck.domain = '.' + ck.domain;				}			} else {				ck.domain = domain;			}			ck.path = ck.path || '/';						cks[ck.domain + ck.path] = cks[ck.domain + ck.path] || '';			if (ck.value=='deleted'){				cks[ck.domain + ck.path] = cks[ck.domain + ck.path].replace(new RegExp('(^|; )' + ck.key + '=[^;]+(; )?'), '; ');			} else {				cks[ck.domain + ck.path] = cks[ck.domain + ck.path].replace(new RegExp('(^|; )' + ck.key + '=[^;]+(; )?'), '$2') +											'; ' + ck.key + '=' + ck.value;			}		}		return this;	},	getCookie: function (_appKey, _userId, url){		if (!this.cache[_appKey]) {			return '; ';		}		let cks = this.cache[_appKey][_userId]||{}, res = [];		if (!!url) {			url = '.' + url.replace(/^[^\.]+:\/+/, '')+'/';		}		for (var i in cks) {			let j = i;			if (i[0] != '.') {				i = '.' + i;			}			if (!url || url.indexOf(i) != -1) {				res.push(cks[j]);			}		}		return res.join('; ').replace(/^; /,'').replace(/(; ){2,}/g,'; ').replace(/; ?$/,'');	},	getCookie2: function (_appKey, _userId, url, ckName){		var cookStr = this.getCookie(_appKey, _userId, url);		var ary = cookStr.split(/; ?/),len = ary.length;		for (var i =0; i<len; i++) {			var a = ary[i].split('=');			if (a[0] == ckName) {				a.shift();				return a.join('=');			}		}	},	remove: function (hostAry) {		for (let i = 0, len = hostAry.length; i < len; i++) {			COOKIES.removeHost(hostAry[i]);		}		return this;	}}if (!COOKIE_MANAGE.init) {	COOKIE_MANAGE.init = true;	COOKIE_MANAGE.fromDB();}